HarvestGuard/
├── data/                            # Input/output image datasets
│   ├── raw/                         # Unprocessed images
│   ├── preprocessed/                # Cleaned, resized images
│   ├── reference/                   # Verified authentic samples
│   ├── expired_or_suspect/          # Fake/expired samples
│   └── annotations/                 # CSV files with labels
├── models/                          # AI models
│   ├── autoencoder.py               # Autoencoder architecture
│   ├── rl_agent.py                  # RL agent
│   └── checkpoints/                 # Saved model weights
│       ├── autoencoder.pth
│       └── rl_agent_smart.pth
├── notebooks/                       # Jupyter notebooks for exploration
│   ├── 01_data_preprocessing.ipynb
│   ├── 02_train_autoencoder.ipynb
│   ├── 03_inference_demo.ipynb
│   └── 04_rl_training.ipynb
├── utils/                           # Helper scripts
│   ├── image_processing.py
│   ├── anomaly_scoring.py
│   ├── calculate_threshold.py
│   ├── update_threshold_config.py
│   └── visualization.py
├── backend/                         # FastAPI backend
│   ├── app/
│   │   ├── api/
│   │   │   ├── v1/
│   │   │   │   ├── endpoints/
│   │   │   │   │   ├── auth.py      # Authentication endpoints
│   │   │   │   │   ├── scan.py      # Image scanning (single/batch)
│   │   │   │   │   ├── feedback.py  # Feedback submission
│   │   │   │   │   ├── user.py      # User management
│   │   │   │   │   └── status.py    # Server status endpoint
│   │   │   │   └── __init__.py
│   │   │   └── __init__.py
│   │   ├── core/
│   │   │   ├── config.py            # Environment configs
│   │   │   ├── security.py          # JWT and auth utilities
│   │   │   └── __init__.py
│   │   ├── crud/
│   │   │   ├── user.py             # User CRUD
│   │   │   ├── scan.py             # Scan CRUD
│   │   │   ├── feedback.py         # Feedback CRUD
│   │   │   └── __init__.py
│   │   ├── db/
│   │   │   ├── models/
│   │   │   │   ├── user.py        # User model
│   │   │   │   ├── scan.py        # Scan model
│   │   │   │   ├── feedback.py    # Feedback model
│   │   │   │   └── __init__.py
│   │   │   ├── session.py          # DB session management
│   │   │   ├── init_db.py          # DB initialization
│   │   │   └── __init__.py
│   │   ├── schemas/
│   │   │   ├── user.py            # User schemas
│   │   │   ├── scan.py            # Scan schemas
│   │   │   ├── feedback.py        # Feedback schemas
│   │   │   ├── token.py           # Token schemas
│   │   │   └── __init__.py
│   │   ├── services/
│   │   │   ├── prediction.py      # AI prediction logic
│   │   │   ├── batch_processor.py # Batch processing logic
│   │   │   └── __init__.py
│   │   └── main.py                 # FastAPI app entry
│   ├── tests/
│   │   ├── test_auth.py
│   │   ├── test_scan.py
│   │   ├── test_feedback.py
│   │   ├── test_user.py
│   │   ├── test_cli_batch_scan.py  # Moved demo_cli_batch_scan.py
│   │   └── __init__.py
│   ├── scripts/
│   │   └── batch_run.py           # CLI batch scanner
│   ├── .env                        # Environment variables
│   ├── requirements.txt            # Dependencies
│   └── README.md
frontend/
├── src/
│   ├── assets/                 # Static assets
│   │   ├── logo.png
│   │   └── background.jpg
│   ├── components/
│   │   ├── Navbar/
│   │   │   ├── Navbar.tsx
│   │   │   └── Navbar.module.css
│   │   ├── Footer/
│   │   │   ├── Footer.tsx
│   │   │   └── Footer.module.css
│   │   ├── ServerStatus/
│   │   │   ├── ServerStatus.tsx
│   │   │   └── ServerStatus.module.css
│   │   ├── HeroSection/
│   │   │   ├── HeroSection.tsx
│   │   │   └── HeroSection.module.css
│   │   ├── CarouselSection/
│   │   │   ├── CarouselSection.tsx
│   │   │   └── CarouselSection.module.css
│   │   ├── FileUpload/
│   │   │   ├── FileUpload.tsx
│   │   │   └── FileUpload.module.css
│   │   ├── BatchUpload/
│   │   │   ├── BatchUpload.tsx
│   │   │   └── BatchUpload.module.css
│   │   ├── ResultsTable/
│   │   │   ├── ResultsTable.tsx
│   │   │   └── ResultsTable.module.css
│   │   ├── GuideContent/
│   │   │   ├── GuideContent.tsx
│   │   │   └── GuideContent.module.css
│   │   ├── LoadingSpinner/
│   │   │   ├── LoadingSpinner.tsx
│   │   │   └── LoadingSpinner.module.css
│   ├── pages/
│   │   ├── Home/
│   │   │   ├── Home.tsx
│   │   ├── Upload/
│   │   │   ├── Upload.tsx
│   │   ├── Results/
│   │   │   ├── Results.tsx
│   │   ├── Guide/
│   │   │   ├── Guide.tsx
│   │   ├── Login/
│   │   │   ├── Login.tsx
│   ├── services/
│   │   ├── api.ts
│   │   └── auth.ts
│   ├── App.tsx
│   ├── main.tsx
│   └── index.css
├── public/
│   ├── favicon.ico
│   └── index.html
├── vite.config.ts
├── package.json
├── tsconfig.json
├── tsconfig.node.json
└── README.md

✅ Goals Covered Ffrom the Enhanced Bckend Structure:
Feature	Implementation
User/Admin Auth	auth.py, user.py, admin.py
MySQL DB	Managed in db/session.py, models in db/models/
AI Integration	services/prediction.py calls AE & RL
Logging Predictions	Stored in scan.py model and CRUD
Feedback Loop	Feedback schema, model, CRUD & endpoints
Role Management	Users table includes role field (user / admin)
Scalable API	Versioned endpoints under api/v1
App-ready	Structure supports frontend integration and deployment